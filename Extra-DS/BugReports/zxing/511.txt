module size estimation is slightly inaccurate
There are some subtle problems with the estimation of module size. Greatest impact is on low resolution (low pixel-per-module) images, particularly for larger codes. I actually came across this when looking at 510. blackbox/qrcode-2/11.gif was causing core dumps in C++ but no unexpected exceptions in Java. The issue in 510 was that the C++ code wasn't handling a difference between the estimated dimension of the image and what was encoded in the version. Easy enough to fix (adding the check and throwing an exception as the Java code does) but it did make me wonder why 11.gif wasn't getting decoded. It turns out that the existing module estimation code doesn't estimate the module size quite right. The module size in the 11.gif is 2 pixels but gets estimated at something less (1.8 if I recall). This causes the dimension to be 69 rather than the true 65. The only thing required to fix this was moving around the -1s. I looked at all the places where it was calculating incorrect values on 11.gif (in the black white black run measuring code) and fixed them. With these changes, all the length measurements are spot on, not just close enough to decode. The change doesn't do much for the test set; it picks up four (which I assume are 11.gif in it's various rotations). With this change, even single pixel-per-module codes can be decoded, so I added a down-sampled version of 16.gif to the test set. boundary.patch 5.5 KB &nbsp; View &nbsp; Download 32.gif 708 bytes &nbsp; View &nbsp; Download () Owner: srowen I can commit this, but it doesn't affect the number of images that pass when I run the tests. #11 does not decode. Any ideas? Status: Accepted To see more successes, you'd need 508. Without 508, it'll never find three finders in 11. I should put an "I think" around that. I don't know that I tested that exact case, but I am pretty sure ... OK yes I see that now. Status: FixedLabels: Type-Defect Priority-Low