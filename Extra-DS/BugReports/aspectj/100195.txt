Missing LocalVariableTable debug info for around advice
AspectJ version: 1.2.1 (also observed in aspectj-DEVELOPMENT) java version "1.4.2_07" When debugging java code woven with an "around" advice with proceed, it looks like the LocalVariableTable information gets lost during the weaving. Example code: // Foo.java public class Foo { private String myString = "A String"; public static void main(String[] args) { new Foo().foo(); } private void foo() { String myLocal = myString; System.out.println(myLocal); // breakpoint here } } // Test.aj aspect Test { void around() : ( execution(* Foo.foo(..) ) ) { System.out.println("before"); proceed(); System.out.println("after"); } } We compiled with ajc 1.2.1: ajc -g -preserveAllLocals -sourceroots . When running Foo in the Eclipse 3.1.0 debugger and setting a breakpoint at the "System.out.println(myLocal);" line, the debugger "Variables" window is empty. Also, disassembling with javap shows that the LocalVariableTable is empty in the generated foo_aroundBody0 method : > javap -c -l -s -private Foo private static final void foo_aroundBody0(Foo); Signature: (LFoo;)V Code: 0: aload_0 1: getfield #15; //Field myString:Ljava/lang/String; 4: astore_1 5: aload_1 6: ldc #30; //String X 8: invokevirtual #36; //Method java/lang/String.endsWith: (Ljava/lang/String;)Z 11: ifeq 27 14: ldc #38; //String local1 16: astore_3 17: getstatic #44; //Field java/lang/System.out:Ljava/io/PrintStream; 20: aload_3 21: invokevirtual #50; //Method java/io/PrintStream.println: (Ljava/lang/String;)V 24: goto 37 27: ldc #52; //String local2 29: astore_3 30: getstatic #44; //Field java/lang/System.out:Ljava/io/PrintStream; 33: aload_3 34: invokevirtual #50; //Method java/io/PrintStream.println: (Ljava/lang/String;)V 37: return LineNumberTable: line 7: 0 line 8: 5 line 9: 14 line 10: 17 line 12: 27 line 13: 30 line 15: 37