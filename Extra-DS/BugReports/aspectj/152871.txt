Parse bytecode at most once when weaving: 10% CPU time reduction
I'm analyzing a profile of cpu times spent weaving into Weblogic 9.2 with LTW. Of a total of 22 seconds of CPU, 2.6 seconds are spent in ClassParser.parse() with the exact same amount spent underneath WeavingAdaptor.shouldWeave and WeavingAdaptor.shouldWeaveAnnotationStyleAspect WeavingAdaptor.shouldWeave is calling CLWA.accept which calls Utility.makeJavaClass which calls ClassParser.parse. Then the exact same expensive operation is getting called again in shouldWeaveAnnotationStyleAspect via BcelWorld.isAnnotationStyleAspect. Proposed Simple fix: allow shouldWeave to also return a BcelObjectType by setting a field in the adapter (which would be cleared to be null on start). The in shouldWeaveAnnotationStyleAspect, check the field. I'd be glad to write and test a patch to do this if the committers agree with the proposal. We wouldn't want to always parse the bytecode, because it would we should be aiming to avoid that expense as often as possible. In our case, we're using exclusion type patterns that currently require accept to make a Java class. In cases where that's not necessary, it also seems odd that shouldWeaveAnnotationStyleAspect runs at all: I will post a separate enhancement request for limiting the cases where it runs.